"use strict";var P=Object.create;var h=Object.defineProperty;var $=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var N=Object.getPrototypeOf,F=Object.prototype.hasOwnProperty;var I=(t,s,i,e)=>{if(s&&typeof s=="object"||typeof s=="function")for(let o of b(s))!F.call(t,o)&&o!==i&&h(t,o,{get:()=>s[o],enumerable:!(e=$(s,o))||e.enumerable});return t};var f=(t,s,i)=>(i=t!=null?P(N(t)):{},I(s||!t||!t.__esModule?h(i,"default",{value:t,enumerable:!0}):i,t));var u=require("glob"),g=f(require("fs")),n=f(require("path")),d=f(require("xml2js")),v=require("cleye"),l=(0,v.cli)({name:"transpile-iconify",parameters:["<svg-path>"],help:{description:"Transform SVG files into JSON format for Iconify",examples:["transpile-iconify ./path/to/icons/**/*.svg","transpile-iconify ./path/to/icons/**/*.svg --output=icons.json","transpile-iconify ./path/to/icons/**/*.svg --output=icons.json --prefix=iconify"],usage:"transpile-iconify <svg-path> [options]",version:"0.0.3"},flags:{output:{type:String,description:"Output JSON filename",default:"icons.json"},prefix:{type:String,description:"Prefix for the icons"}}});async function O(t,s,i){let e=await(0,u.glob)(t),o={};for(let p of e){let y=await g.promises.readFile(p,"utf8"),r=(await new d.Parser().parseStringPromise(y)).svg;delete r.$;let w=r.path?.map(c=>c.$).map(c=>`<path d="${c.d}" fill="currentColor"/>`).join(`
`)||"",S=r.$?.width||24,x=r.$?.height||24,j=n.basename(p,".svg"),a=i||n.basename(n.dirname(p));o[a]||(o[a]={prefix:a,icons:{}}),o[a].icons[j]={body:w,width:parseInt(S),height:parseInt(x)}}let m=n.join(process.cwd(),s);await g.promises.writeFile(m,JSON.stringify(o,null,2),"utf8"),console.log(`All SVG files have been transformed into ${m}`)}O(l._.svgPath,l.flags.output,l.flags.prefix);
